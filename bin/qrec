#!/usr/bin/env python

import thread
import os
import sys
from optparse import OptionParser
import pyaudio
import wave
from qrec import Recorder
import qrec.qfile as qf

from argparse import ArgumentParser

parser = ArgumentParser(description="Quickly record list of short sound files.")
parser.add_argument('file', #dest="input_file", metavar="FILE",
                    help="input file in Q format")
parser.add_argument('-o', '--output-dir', dest="output_dir", metavar="DIR",
                    default='./sound',
                    help="directory to create sound files in")
parser.add_argument('-a', '--autoreplay', dest="autoreplay",
                    action="store_true", default=False,
                    help="enable automatic replay after each recording")
parser.add_argument('-n', '--only-new', dest="only_new",
                    action="store_true", default=False,
                    help="do not record if a file with same name exists")

args = parser.parse_args()

# Prepare output directory
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

lines = qf.open(args.file)
print "\n\nWelcome to QRec (" + str(len(lines)) + " files to record)\n"

def filename(item):
    return args.output_dir + "/" + "_".join(item.split())

def record(rec, opts, item):
    sys.stdout.write("\033[92m" + item + "\033[0m\t")

    sys.stdout.write("  [Rq] ")
    while True:
        ans = raw_input() or "r"
        if ans == 'q':
            print "Exiting..."
            exit()

        elif ans == 'r':
            accepted = False
            while not accepted:
                # Record
                rec.start()
                sys.stdout.write("recording... [enter to stop] ")
                raw_input()
                rec.stop()
                print "recorded %.2fs" % rec.duration()

                # if `autoreplay` mode, replay and ask for acceptance
                if opts.autoreplay:
                    rec.play()
                    default = 'y'
                    sys.stdout.write("accept ? [Ynp] ")
                    while True:
                        ans = raw_input() or default
                        if ans == 'y':
                            accepted = True
                            break
                        elif ans == 'n':
                            break
                        elif ans == 'p':
                            rec.play()
                            default = 'p'
                            sys.stdout.write("accept ? [ynP] ")
                        else:
                            print "invalid answer [y: yes, n: no, p: play]"

                # if `autoreplay` mode is off, always accept
                else:
                    accepted = True
            break

        else:
            print "Invalid answer [r: record, q: quit]"

    f = filename(item)
    rec.save(f)


with Recorder() as rec:
    for i, l in enumerate(lines):
        f = filename(l)
        if args.only_new and os.path.isfile(f):
            sys.stdout.write('.')
        else:
            record(rec, args, l)

exit()

# vim: set filetype=python:
